// Gulp.js configuration
'use strict';

const           
    fs = require('fs'),
    // Gulp and plugins
    gulp = require('gulp'),
    gutil = require('gulp-util'),
    newer = require('gulp-newer'),
    imagemin = require('gulp-imagemin'),
    sass = require('gulp-sass'),
    postcss = require('gulp-postcss'),
    deporder = require('gulp-deporder'),
    concat = require('gulp-concat'),
    stripdebug = require('gulp-strip-debug'),
    sourcemaps = require('gulp-sourcemaps'),
    uglify = require('gulp-uglify');

if(fs.existsSync('./local.config.json')){	
    // the file exists
    var config = require('./local.config.json');
}else{
    // the file doesn't exists
    var config = require('./config.json');
}


// Browser-sync
var browsersync = false;


// PHP settings
const php = {
    src: config.dir.src + 'php/**/*.php',
    build: config.dir.build
};

// copy PHP files
gulp.task('php', () => {
    return gulp.src(php.src)
        .pipe(newer(php.build))
        .pipe(gulp.dest(php.build));
});

const images = {
    src: config.dir.src + 'images/**/*',
    build: config.dir.build + 'images/'
};

// image processing
gulp.task('images', () => {
    return gulp.src(images.src)
        .pipe(newer(images.build))
        .pipe(imagemin())
        .pipe(gulp.dest(images.build));
});

// CSS settings
var css = {
    src: [config.dir.src + 'scss/*.scss'],
    watch: config.dir.src + 'scss/**/*',
    build: config.dir.build,
    sassOpts: {
        outputStyle: 'nested',
        imagePath: images.build,
        precision: 3,
        errLogToConsole: true
    },
    processors: [
        require('postcss-assets')({
            loadPaths: ['images/', 'fonts/'],
            basePath: config.dir.build,
            baseUrl:  config.dir.baseUrl
        }),
        require('autoprefixer')({
            browsers: config.autoprefixer.browsers
        }),
        require('css-mqpacker'),
        require('cssnano')
    ]
};

// CSS processing
gulp.task('css', gulp.series('images', () => {
    return gulp.src(css.src)
        .pipe(browsersync ? sourcemaps.init() : gutil.noop())
        .pipe(sass(css.sassOpts))
        .pipe(postcss(css.processors))
        .pipe(browsersync ? sourcemaps.write() : gutil.noop())
        .pipe(gulp.dest(css.build))
        .pipe(browsersync ? browsersync.reload({
            stream: true
        }) : gutil.noop());
}));

// JavaScript settings
const js = {
    src: config.dir.src + 'js/**/*',
    build: config.dir.build,
    filename: 'script.js'
};

// JavaScript processing
gulp.task('js', () => {

    return gulp.src(js.src)
        .pipe(deporder())
        .pipe(concat(js.filename))
        .pipe(browsersync ?  gutil.noop() : stripdebug())
        .pipe(uglify())
        .pipe(gulp.dest(js.build))
        .pipe(browsersync ? browsersync.reload({
            stream: true
        }) : gutil.noop());

});

// run all tasks
gulp.task('build', gulp.series('php', 'css', 'js'));

// Browsersync options
const syncOpts = {
    proxy: config.browsersync.proxy,
    files: config.dir.build + '**/*',
    open: false,
    notify: false,
    ghostMode: false,
    port: config.browsersync.port,
    ui: {
        port: 8001
    }
};


// browser-sync
gulp.task('browsersync', () => {
    if (browsersync === false) {
        browsersync = require('browser-sync').create();
        browsersync.init(syncOpts);
    }
});

// watch for file changes
gulp.task('watch', gulp.parallel('browsersync', () => {
    
    // page changes
    gulp.watch(php.src, gulp.series('php'), browsersync ? browsersync.reload : {});

    // image changes
    gulp.watch(images.src, gulp.series('images'));

    // CSS changes
    gulp.watch(css.watch, gulp.series('css'));

    // JavaScript main changes
    gulp.watch(js.src, gulp.series('js'));

}));

// default task
gulp.task('default', gulp.series('build', 'watch'));
